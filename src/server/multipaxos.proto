syntax = "proto3";

package scooter;
option go_package = "github.com/bgicyfire/02360351-Distributed-Systems-HW2/src/server/multipaxos";

service MultiPaxosService {
  rpc TriggerLeader(TriggerRequest) returns (TriggerResponse);
  rpc Prepare(PrepareRequest) returns (PrepareResponse) {}
  rpc Accept(AcceptRequest) returns (AcceptResponse) {}
  rpc Commit(CommitRequest) returns (CommitResponse) {}
  rpc GetPaxosState(GetPaxosStateRequest) returns (GetPaxosStateResponse) {}
  rpc GetLastGoodSlot(GetLastGoodSlotRequest) returns (GetLastGoodSlotResponse){}
}

message TriggerRequest{
  string member_id = 1;
  ScooterEvent event = 2;
}

message TriggerResponse{
  bool ok = 1;
}

message PrepareRequest {
  int64 slot = 1;
  int32 round = 2;
  string id = 3;
}

// Promise message
message PrepareResponse {
  bool ok = 1;
  int32 acceptedRound = 2;  // Return previously accepted round
  optional ScooterEvent acceptedValue = 3;// Return previously accepted value
}

message AcceptRequest {
  int64 slot = 1;
  int32 round = 2;
  string id = 3;
  ScooterEvent value = 4;
}

// Learn message
message AcceptResponse {
  bool ok = 1;
}

message CommitRequest {
  int64 slot = 1;
  int32 round = 2;
  string id = 3;
  ScooterEvent value = 4;
}

message CommitResponse {
  bool ok = 1;
}

message GetPaxosStateRequest {
  int64 slot = 1;
}

message GetPaxosStateResponse {
  int32 promised_round = 1;
  int32 accepted_round = 2;
  ScooterEvent accepted_value = 3;
  bool committed = 4;
}

message GetLastGoodSlotRequest{
  string member_id = 1;
}

message GetLastGoodSlotResponse{
  string member_id = 1;
  int64 last_good_slot = 2;
}

// Define a generic Event message that can hold any type of event
message ScooterEvent {
  string event_id = 1;
  string scooter_id = 2; // Common field needed for all events

  oneof event_type {
    CreateScooterEvent create_event = 3;
    ReserveScooterEvent reserve_event = 4;
    ReleaseScooterEvent release_event = 5;
  }
}

// Specific event details for creating a scooter
message CreateScooterEvent {
  // No additional fields needed for a create event in this example
}

// Specific event details for reserving a scooter
message ReserveScooterEvent {
  string reservation_id = 1;
}

// Specific event details for releasing a scooter
message ReleaseScooterEvent {
  string reservation_id = 1;
  int64 distance = 2; // Distance the scooter was used for
}