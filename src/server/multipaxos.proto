syntax = "proto3";

package scooter;
option go_package = "github.com/bgicyfire/02360351-Distributed-Systems-HW2/src/server/multipaxos";

service MultiPaxosService {
  rpc Prepare (PrepareRequest) returns (PrepareResponse);
  rpc Promise (PromiseRequest) returns (PromiseResponse);
  rpc Accept (AcceptRequest) returns (AcceptResponse);
  rpc Commit (CommitRequest) returns (CommitResponse);
}

message PrepareRequest{
  int32 round = 1;
  string id = 2;
}

message PrepareResponse{
  bool ok = 1;
}

message PromiseRequest{
  int32 round = 1;
  string id = 2;
  int32 value = 3;
  bool ack = 4;
}

message PromiseResponse{
  bool ok = 1;
}

message AcceptRequest {
  int32 round = 1;
  string id = 2;
  int32 value = 3;
}

message AcceptResponse {
  bool ok = 1;
}

message CommitRequest{
  int32 round = 1;
  string id = 2;
  int32 value = 3;
}

message CommitResponse{
  bool ok = 1;
}

// Define a generic Event message that can hold any type of event
message ScooterEvent {
  string scooter_id = 1; // Common field needed for all events

  oneof event_type {
    CreateScooterEvent create_event = 2;
    ReserveScooterEvent reserve_event = 3;
    ReleaseScooterEvent release_event = 4;
  }
}

// Specific event details for creating a scooter
message CreateScooterEvent {
  // No additional fields needed for a create event in this example
}

// Specific event details for reserving a scooter
message ReserveScooterEvent {
  string reservation_id = 1;
}

// Specific event details for releasing a scooter
message ReleaseScooterEvent {
  string reservation_id = 1;
  int64 distance = 2; // Distance the scooter was used for
}